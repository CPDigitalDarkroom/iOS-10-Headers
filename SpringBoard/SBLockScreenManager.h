//
//     Generated by class-dump 3.5 (64 bit) (Debug version compiled Mar 24 2016 13:14:34).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2015 by Steve Nygard.
//

#import <objc/NSObject.h>

#import "BSDescriptionProviding-Protocol.h"
#import "PKPassLibraryDelegate-Protocol.h"
#import "SBAlertObserver-Protocol.h"
#import "SBDashBoardViewControllerDelegate-Protocol.h"
#import "SBFPrivateAuthenticationObserver-Protocol.h"
#import "SBLockScreenViewControllerDelegate-Protocol.h"
#import "SBMesaUnlockBehaviorDelegate-Protocol.h"
#import "SBPassKitPrearmTriggerDelegate-Protocol.h"
#import "SBPasscodeEntryAlertViewControllerDelegate-Protocol.h"
#import "SBUIBiometricEventMonitorDelegate-Protocol.h"
#import "SBUIBiometricEventObserver-Protocol.h"
#import "SBWallpaperColorProvider-Protocol.h"

@class NSMutableSet, NSString, PKPassLibrary, SBDashBoardViewController, SBFAuthenticationAssertion, SBFUserAuthenticationController, SBLiftToWakeManager, SBLockScreenAutoUnlockAggregateRule, SBLockScreenDisabledAssertionManager, SBLockScreenUnlockRequest, SBLockScreenViewControllerBase, SBPassKitPrearmTrigger, SBPasscodeEntryAlertViewController;
@protocol SBAlertingNotificationDestination, SBFLockOutStatusProvider;

@interface SBLockScreenManager : NSObject <BSDescriptionProviding, SBLockScreenViewControllerDelegate, SBUIBiometricEventObserver, SBUIBiometricEventMonitorDelegate, PKPassLibraryDelegate, SBPassKitPrearmTriggerDelegate, SBPasscodeEntryAlertViewControllerDelegate, SBAlertObserver, SBFPrivateAuthenticationObserver, SBDashBoardViewControllerDelegate, SBWallpaperColorProvider, SBMesaUnlockBehaviorDelegate>
{
    SBLockScreenViewControllerBase *_lockScreenViewController;
    _Bool _allowDisablePasscodeLockAssertion;
    _Bool _allowUILockUnlock;
    _Bool _isUILocked;
    _Bool _isWaitingToLockUI;
    SBLockScreenUnlockRequest *_unlockRequest;
    _Bool _uiHasBeenLockedOnce;
    _Bool _uiUnlocking;
    SBPasscodeEntryAlertViewController *_passcodeEntryController;
    SBFAuthenticationAssertion *_sustainAuthenticationWhileUIUnlockedAssertion;
    SBLockScreenDisabledAssertionManager *_lockScreenDisabledAssertionManager;
    _Bool _isInLostMode;
    _Bool _bioAuthenticatedWhileMenuButtonDown;
    NSMutableSet *_bioUnlockingDisabledRequesters;
    SBLockScreenAutoUnlockAggregateRule *_autoUnlockRuleAggregator;
    SBPassKitPrearmTrigger *_prearmTrigger;
    _Bool _presentingPassKitInterface;
    _Bool _justDismissedPassKitInterface;
    PKPassLibrary *_passLibrary;
    _Bool _didMatchBeforeTriggerTimeout;
    _Bool _useDashBoard;
    _Bool _shouldTransitionIrisWallpaperToStillWhenPlaybackFinishes;
    id <SBFLockOutStatusProvider> _lockOutController;
    SBFUserAuthenticationController *_userAuthController;
    SBLiftToWakeManager *_liftToWakeManager;
    CDUnknownBlockType _unlockActionBlock;
}

+ (id)sharedInstanceIfExists;
+ (id)sharedInstance;
+ (id)_sharedInstanceCreateIfNeeded:(_Bool)arg1;
@property(copy, nonatomic) CDUnknownBlockType unlockActionBlock; // @synthesize unlockActionBlock=_unlockActionBlock;
@property(retain, nonatomic, getter=_liftToWakeManager, setter=_setLiftToWakeManager:) SBLiftToWakeManager *liftToWakeManager; // @synthesize liftToWakeManager=_liftToWakeManager;
@property(retain, nonatomic, getter=_userAuthController, setter=_setUserAuthController:) SBFUserAuthenticationController *userAuthController; // @synthesize userAuthController=_userAuthController;
@property(retain, nonatomic, getter=_lockOutController, setter=_setLockOutController:) id <SBFLockOutStatusProvider> lockOutController; // @synthesize lockOutController=_lockOutController;
@property(readonly) _Bool bioAuthenticatedWhileMenuButtonDown; // @synthesize bioAuthenticatedWhileMenuButtonDown=_bioAuthenticatedWhileMenuButtonDown;
@property(nonatomic, getter=isUIUnlocking) _Bool UIUnlocking; // @synthesize UIUnlocking=_uiUnlocking;
@property(readonly) _Bool isWaitingToLockUI; // @synthesize isWaitingToLockUI=_isWaitingToLockUI;
@property(readonly) _Bool isUILocked; // @synthesize isUILocked=_isUILocked;
@property(readonly, nonatomic) SBLockScreenViewControllerBase *lockScreenViewController; // @synthesize lockScreenViewController=_lockScreenViewController;
- (void).cxx_destruct;
- (void)extendedKeybagLockStateChanged:(_Bool)arg1;
- (void)alertDidDeactivate:(id)arg1;
- (void)passcodeEntryAlertViewControllerWantsEmergencyCall:(id)arg1;
- (_Bool)passcodeEntryAlertViewController:(id)arg1 authenticatePasscode:(id)arg2;
- (void)paymentServiceReceivedInterruption;
- (void)contactlessInterfaceDidDismissFromSource:(long long)arg1;
- (void)_handlePassKitDismissal;
- (void)mesaUnlockBehavior:(id)arg1 requestsUnlock:(id)arg2 withFeedback:(id)arg3;
- (void)mesaUnlockBehavior:(id)arg1 requestsFeedback:(id)arg2;
- (_Bool)biometricEventMonitorShouldRelockAfterBioUnlock:(id)arg1;
- (void)biometricEventMonitor:(id)arg1 handleBiometricEvent:(unsigned long long)arg2;
- (void)noteMenuButtonDoublePress;
- (void)noteMenuButtonSinglePress;
- (void)triggerDidFire:(id)arg1;
- (void)triggerDidTimeoutForDoubleTap:(id)arg1;
- (void)triggerDidTimeoutForFingerOn:(id)arg1;
- (_Bool)_shouldUnlockUIOnKeyDownEvent;
- (_Bool)handleKeyHIDEvent:(struct __IOHIDEvent *)arg1;
- (_Bool)_shouldBeInSetupMode;
- (void)_maybeLaunchSetupForcingCheckIfNotBricked:(_Bool)arg1;
- (void)activationChanged:(id)arg1;
- (void)enableLostModePlugin;
- (_Bool)isInLostMode;
- (void)exitLostModeIfNecessaryFromRemoteRequest:(_Bool)arg1;
- (void)activateLostModeForRemoteLock:(_Bool)arg1;
- (void)_lockFeaturesForRemoteLock:(_Bool)arg1;
- (void)remoteLock:(_Bool)arg1;
- (void)_frontmostDisplayChanged:(id)arg1;
- (void)_lockScreenDimmed:(id)arg1;
- (void)_handleBacklightFadeEnded;
- (void)_handleBacklightLevelChanged:(id)arg1;
- (void)_resetOrRestoreStateChanged:(id)arg1;
- (void)_deviceBlockedChanged:(id)arg1;
- (void)_deviceLockedChanged:(id)arg1;
- (void)attemptUnlockWithMesa;
- (void)attemptUnlockWithPasscode:(id)arg1;
- (_Bool)_attemptUnlockWithPasscode:(id)arg1 mesa:(_Bool)arg2 finishUIUnlock:(_Bool)arg3;
- (_Bool)_attemptUnlockWithPasscode:(id)arg1 finishUIUnlock:(_Bool)arg2;
- (void)startUIUnlockFromSource:(int)arg1 withOptions:(id)arg2;
- (void)_playAuthenticationFeedbackForSuccess:(_Bool)arg1;
- (void)_postLockCompletedNotification:(_Bool)arg1;
- (void)_noteStartupTransitionDidBegin;
- (void)_noteStartupTransitionWillBegin;
- (id)descriptionBuilderWithMultilinePrefix:(id)arg1;
- (id)descriptionWithMultilinePrefix:(id)arg1;
- (id)succinctDescriptionBuilder;
- (id)succinctDescription;
@property(readonly, copy) NSString *description;
- (void)_performLockScreenAlertDeactivationTransition;
- (void)_performLockScreenAlertActivationTransitionAnimated:(_Bool)arg1 dimInAnimation:(_Bool)arg2 animationProvider:(CDUnknownBlockType)arg3 completion:(CDUnknownBlockType)arg4;
- (void)_prepareWallpaperForUnlockedMode;
- (void)_prepareWallpaperForLockedMode;
- (_Bool)_shouldProvideMesaFailureFeedback;
- (void)updateSpringBoardStatusBarForLockScreenTeardown;
- (_Bool)unlockWithRequest:(id)arg1 completion:(CDUnknownBlockType)arg2;
- (_Bool)isPasscodeEntryAlertVisible;
- (_Bool)_setPasscodeVisible:(_Bool)arg1 animated:(_Bool)arg2;
- (void)setPasscodeVisible:(_Bool)arg1 animated:(_Bool)arg2;
- (void)_runUnlockActionBlock:(_Bool)arg1;
- (_Bool)isLockScreenDisabledForAssertion;
- (void)removeLockScreenDisableAssertion:(id)arg1;
- (void)addLockScreenDisableAssertion:(id)arg1;
- (void)_handleExternalUIUnlock:(id)arg1;
- (_Bool)_finishUIUnlockFromSource:(int)arg1 withOptions:(id)arg2;
- (_Bool)unlockUIFromSource:(int)arg1 withOptions:(id)arg2;
- (_Bool)_canAttemptRealUIUnlockIgnoringBacklightNonsenseWithReason:(out id *)arg1;
- (void)_sendUILockStateChangedNotification;
- (void)_lockUI;
- (void)_reallySetUILocked:(_Bool)arg1;
- (void)_setUILocked:(_Bool)arg1;
- (void)_createAuthenticationAssertion;
- (void)_clearAuthenticationLockAssertion;
- (void)_relockUIForButtonPress:(_Bool)arg1 afterCall:(_Bool)arg2;
- (void)_activateLockScreenAnimated:(_Bool)arg1 animationProvider:(CDUnknownBlockType)arg2 automatically:(_Bool)arg3 inScreenOffMode:(_Bool)arg4 dimInAnimation:(_Bool)arg5 dismissNotificationCenter:(_Bool)arg6 completion:(CDUnknownBlockType)arg7;
- (id)averageColorForCurrentWallpaperInScreenRect:(struct CGRect)arg1;
- (void)dashBoardController:(id)arg1 unlockWithRequest:(id)arg2 completion:(CDUnknownBlockType)arg3;
- (void)dashBoardViewControllerIrisPlayingDidFinish:(id)arg1;
@property(readonly) _Bool isBioUnlockingDisabled;
- (void)setBioUnlockingDisabled:(_Bool)arg1 forRequester:(id)arg2;
- (_Bool)handleTransitionRequest:(id)arg1;
@property(readonly, nonatomic) id <SBAlertingNotificationDestination> notificationDestination;
@property(readonly, nonatomic) SBDashBoardViewController *dashBoardViewController;
- (void)lockUIFromSource:(int)arg1 withOptions:(id)arg2 completion:(CDUnknownBlockType)arg3;
- (void)lockUIFromSource:(int)arg1 withOptions:(id)arg2;
@property(readonly) _Bool isLockScreenVisible;
@property(readonly) _Bool isLockScreenActive;
@property(readonly) _Bool shouldPlayLockSound;
@property(readonly) _Bool shouldHandlePocketStateChanges;
- (_Bool)shouldLockUIAfterEndingCall;
- (_Bool)_shouldLockAfterEndingFaceTimeCall;
- (_Bool)_shouldLockAfterEndingTelephonyCall;
- (_Bool)hasUIEverBeenLocked;
- (id)_newLockScreenController;
- (id)init;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

